@page "/login"

@using System.Security.Claims
@using BlazorServerCustomAuth.Requests
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager navigationManager
@inject ExternalAuthService externalAuthService
@inject IHttpContextAccessor HttpContextAccessor

<h3>Login</h3>

<EditForm Model="Model" OnSubmit="Autenticate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="Email">Email</label>
        <InputText id="Email" class="form-control" @bind-Value="Model.Email" />
    </div>
    <div class="form-group">
        <label for="Password">Password</label>
        <InputText id="Password" class="form-control" @bind-Value="Model.Password"  type="password"/>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    [CascadingParameter(Name = "AccessToken")]
    public string AccessToken { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [CascadingParameter]
    public HttpContext? httpContext { get; set; }

    private LoginRequest Model = new LoginRequest();
    private string? errorMessage;

    private async Task Autenticate()
    {
        var LoginResponse = await externalAuthService.Login(Model);

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, LoginResponse.User.Name),
            new Claim(ClaimTypes.Email, LoginResponse.User.Email),
            new Claim(ClaimTypes.Role, LoginResponse.User.Role),
        };
        var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);
        //AccessToken;
        // httpContext = HttpContextAccessor.HttpContext;
        // await httpContext.SignInAsync(claimsPrincipal);
        //HttpContextAccessor.HttpContext.User = claimsPrincipal;
        navigationManager.NavigateTo("/");
    }
}
